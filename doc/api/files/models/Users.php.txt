<?php
/**
 * \Elabftw\Elabftw\Users
 *
 * @author Nicolas CARPi <nicolas.carpi@curie.fr>
 * @copyright 2012 Nicolas CARPi
 * @see http://www.elabftw.net Official website
 * @license AGPL-3.0
 * @package elabftw
 */
namespace Elabftw\Elabftw;

use PDO;
use Exception;
use Swift_Message;

/**
 * Users
 */
class Users extends Auth
{
    /**
     * Create a new user
     *
     * @param string $email
     * @param string $password
     * @param int $team
     * @param string $firstname
     * @param string $lastname
     * @return bool
     */
    public function create($email, $password, $team, $firstname, $lastname)
    {
        // check for duplicate of email
        if ($this->isDuplicateEmail($email)) {
            throw new Exception(_('Someone is already using that email address!'));
        }

        if (!$this->checkPasswordLength($password)) {
            $error = sprintf(_('Password must contain at least %s characters.'), self::MIN_PASSWORD_LENGTH);
            throw new Exception($error);
        }

        // Put firstname lowercase and first letter uppercase
        $firstname = $this->purifyFirstname($firstname);
        // lastname is uppercase
        $lastname = $this->purifyLastname($lastname);

        // Create salt
        $salt = hash("sha512", uniqid(rand(), true));
        // Create hash
        $passwordHash = hash("sha512", $salt . $_POST['password']);

        // Registration date is stored in epoch
        $registerDate = time();

        // what group do we set for this user ?
        // 1 = sysadmin if it's the first user ever
        // 2 = admin for first user in a team
        // 4 = normal user
        if ($this->isFirstUser()) {
            $group = 1;
        } elseif ($this->isFirstUserInTeam($team)) {
            $group = 2;
        } else {
            $group = 4;
        }

        // WILL NEW USER BE VALIDATED ?
        // here an admin or sysadmin won't need validation
        if (get_config('admin_validate') === 1 && $group === 4) { // validation is required for normal user
            $validated = 0; // so new user will need validation
        } else {
            $validated = 1;
        }

        $sql = "INSERT INTO users (
            `email`,
            `password`,
            `firstname`,
            `lastname`,
            `team`,
            `usergroup`,
            `salt`,
            `register_date`,
            `validated`,
            `lang`
        ) VALUES (
            :email,
            :password,
            :firstname,
            :lastname,
            :team,
            :usergroup,
            :salt,
            :register_date,
            :validated,
            :lang);";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':email', $email);
        $req->bindParam(':password', $passwordHash);
        $req->bindParam(':firstname', $firstname);
        $req->bindParam(':lastname', $lastname);
        $req->bindParam(':team', $team);
        $req->bindParam(':usergroup', $group);
        $req->bindParam(':salt', $salt);
        $req->bindParam(':register_date', $registerDate);
        $req->bindParam(':validated', $validated);
        $req->bindValue(':lang', get_config('lang'));

        return $req->execute();
    }

    /**
     * Send an email to the admin if user is not validated
     *
     * @param int $team
     * @throws Exception
     */
    public function alertAdmin($team)
    {
        // Create the message
        $footer = "\n\n~~~\nSent from eLabFTW http://www.elabftw.net\n";
        $message = Swift_Message::newInstance()
        // Give the message a subject
        ->setSubject(_('[eLabFTW] New user registered'))
        // Set the From address with an associative array
        ->setFrom(array(get_config('mail_from') => 'eLabFTW'))
        // Set the To addresses with an associative array
        ->setTo(array($this->getAdminEmail($team) => 'Admin eLabFTW'))
        // Give it a body
        ->setBody(_('Hi. A new user registered on elabftw. Head to the admin panel to validate the account.') . $footer);
        // generate Swift_Mailer instance
        $mailer = getMailer();
        // SEND EMAIL
        try {
            $mailer->send($message);
        } catch (Exception $e) {
            $Logs = new Logs();
            $Logs->create('Error', 'smtp', $e->getMessage());
            throw new Exception(_('Could not send email to inform admin. Error was logged. Contact an admin directly to validate your account.'));
        }
    }

    /**
     * Check we have not a duplicate email in DB
     *
     * @param string $email
     * @return bool true if there is a duplicate
     */
    public function isDuplicateEmail($email)
    {
        $sql = "SELECT email FROM users WHERE email = :email";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':email', $email);
        $req->execute();

        return (bool) $req->rowCount();
    }

    /**
     * Do we have users in the DB ?
     *
     * @return bool
     */
    private function isFirstUser()
    {
        $sql = "SELECT COUNT(*) AS usernb FROM users";
        $req = $this->pdo->prepare($sql);
        $req->execute();
        $test = $req->fetch();

        return $test['usernb'] === 0;
    }

    /**
     * Are we the first user to register in a team ?
     *
     * @param int $team
     * @return bool
     */
    private function isFirstUserInTeam($team)
    {
        $sql = "SELECT COUNT(*) AS usernb FROM users WHERE team = :team";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':team', $team);
        $req->execute();
        $test = $req->fetch();

        return $test['usernb'] === 0;
    }

    /**
     * Fetch the email of the admin for a team
     *
     * @param int $team
     * @return string
     */
    private function getAdminEmail($team)
    {
        $sql = "SELECT email FROM users WHERE (`usergroup` = 1 OR `usergroup` = 2) AND `team` = :team LIMIT 1";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':team', $team);
        $req->execute();

        return $req->fetchColumn();
    }

    /**
     * Put firstname lowercase and first letter uppercase
     *
     * @param string $firstname
     * @return string
     */
    public function purifyFirstname($firstname)
    {
        return ucwords(strtolower(filter_var($firstname, FILTER_SANITIZE_STRING)));
    }

    /**
     * Put lastname in capital letters
     *
     * @param string $lastname
     * @return string
     */
    public function purifyLastname($lastname)
    {
        return strtoupper(filter_var($lastname, FILTER_SANITIZE_STRING));
    }

    /**
     * Get info about a user
     *
     * @param int $userid
     * @return array
     */
    public function read($userid)
    {
        $sql = 'SELECT * FROM users WHERE userid = :userid';
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':userid', $userid);
        $req->execute();

        return $req->fetch();
    }

    /**
     * Read all users
     *
     * @param int validated
     * @return array
     */
    public function readAll($validated = 1)
    {
        $sql = "SELECT * FROM users WHERE validated = :validated AND team = :team";
        $req = $this->pdo->prepare($sql);
        $req->bindValue(':validated', $validated);
        $req->bindValue(':team', $_SESSION['team_id']);
        $req->execute();

        return $req->fetchAll();
    }

    /**
     * Update user
     *
     * @param array $params POST
     * @throws Exception
     * @return bool
     */
    public function update($params)
    {
        $userid = Tools::checkId($params['userid']);
        if ($userid === false) {
            throw new Exception(_('The id parameter is not valid!'));
        }

        // permission check
        if (!isset($_SESSION['is_admin'])) {
            throw new Exception(_('This section is out of your reach.'));
        }

        // Put everything lowercase and first letter uppercase
        $firstname = ucwords(strtolower(filter_var($params['firstname'], FILTER_SANITIZE_STRING)));
        // Lastname in uppercase
        $lastname = strtoupper(filter_var($params['lastname'], FILTER_SANITIZE_STRING));
        $email = filter_var($params['email'], FILTER_SANITIZE_EMAIL);

        if ($params['validated'] == 1) {
            $validated = 1;
        } else {
            $validated = 0;
        }
        $usergroup = Tools::checkId($params['usergroup']);
        if ($usergroup === false) {
            throw new Exception(_('The id parameter is not valid!'));
        }

        // a non sysadmin cannot put someone sysadmin
        if ($usergroup == 1 && $_SESSION['is_sysadmin'] != 1) {
            throw new Exception(_('Only a sysadmin can put someone sysadmin.'));
        }

        if (strlen($params['password']) > 1) {
            $this->updatePassword($params['password'], $userid);
        }

        $sql = "UPDATE users SET
            firstname = :firstname,
            lastname = :lastname,
            email = :email,
            usergroup = :usergroup,
            validated = :validated
            WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':firstname', $firstname);
        $req->bindParam(':lastname', $lastname);
        $req->bindParam(':email', $email);
        $req->bindParam(':validated', $validated);
        $req->bindParam(':usergroup', $usergroup);
        $req->bindParam(':userid', $userid);

        return $req->execute();
    }

    /**
     * Update the password for a user, or for ourself if none provided
     *
     * @param string $password The new password
     * @param int|null $userid The user we want to update
     * @throws Exception if invalid character length
     * @return bool True if password is updated
     */
    public function updatePassword($password, $userid = null)
    {

        if (is_null($userid)) {
            $userid = $_SESSION['userid'];
        }

        if (!$this->checkPasswordLength($password)) {
            $error = sprintf(_('Password must contain at least %s characters.'), self::MIN_PASSWORD_LENGTH);
            throw new Exception($error);
        }

        $salt = hash("sha512", uniqid(rand(), true));
        $passwordHash = hash("sha512", $salt . $password);

        $sql = "UPDATE users SET salt = :salt, password = :password WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':salt', $salt);
        $req->bindParam(':password', $passwordHash);
        $req->bindParam(':userid', $userid);

        // remove token for this user
        if (!$this->invalidateToken($userid)) {
            throw new Exception('Cannot invalidate token');
        }

        return $req->execute();
    }

    /**
     * Invalidate token for a user
     *
     * @param int $userid
     * @return bool
     */
    private function invalidateToken($userid)
    {
        $sql = "UPDATE users SET token = null WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':userid', $userid);

        return $req->execute();
    }

    /**
     * Validate a user
     *
     * @param int $userid
     * @return string
     */
    public function validate($userid)
    {
        $userid = Tools::checkId($userid);
        if ($userid === false) {
            throw new Exception('The id parameter is not valid!');
        }

        // permission check
        if (!isset($_SESSION['is_admin'])) {
            throw new Exception(_('This section is out of your reach.'));
        }

        $sql = "UPDATE users SET validated = 1 WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);

        // we read to get email of user
        $userArr = $this->read($userid);

        $req->bindParam(':userid', $userid, PDO::PARAM_INT);

        // validate the user
        if ($req->execute()) {
            $msg = _('Validated user with ID :') . ' ' . $userid;
        } else {
            $msg = _('Error validating user!');
        }
        // now let's get the URL so we can have a nice link in the email
        $url = 'https://' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . $_SERVER['PHP_SELF'];
        $url = str_replace('app/controllers/UsersController.php', 'login.php', $url);
        // we send an email to each validated new user
        $footer = "\n\n~~~\nSent from eLabFTW http://www.elabftw.net\n";
        // Create the message
        $message = Swift_Message::newInstance()
        // Give the message a subject
        // no i18n here
        ->setSubject('[eLabFTW] Account validated')
        // Set the From address with an associative array
        ->setFrom(array(get_config('mail_from') => 'eLabFTW'))
        // Set the To addresses with an associative array
        ->setTo(array($userArr['email'] => 'eLabFTW'))
        // Give it a body
        ->setBody('Hello. Your account on eLabFTW was validated by an admin. Follow this link to login : ' . $url . $footer);
        // generate Swift_Mailer instance
        $mailer = getMailer();
        // now we try to send the email
        try {
            $mailer->send($message);
        } catch (Exception $e) {
            throw new Exception(_('There was a problem sending the email! Error was logged.'));
        }

        return $msg;
    }

    /**
     * Destroy user. Will completely remove everything from the user.
     *
     * @param string $email The email of the user we want to delete
     * @param string $password The confirmation password
     * @return bool
     */
    public function destroy($email, $password)
    {
        // check that we got the good password
        $me = $this->read($_SESSION['userid']);
        if (!$this->checkCredentials($me['email'], $password)) {
            throw new Exception(_("Wrong password!"));
        }
        // check the user is in our team and also get the userid
        $useridArr = $this->emailInTeam($email, $_SESSION['team_id']);
        $userid = $useridArr['userid'];

        if (!$userid) {
            throw new Exception(_('No user with this email or user not in your team'));
        }

        $result = array();

        $sql = "DELETE FROM users WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':userid', $userid, PDO::PARAM_INT);
        $result[] = $req->execute();

        $sql = "DELETE FROM experiments_tags WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':userid', $userid, PDO::PARAM_INT);
        $result[] = $req->execute();

        $sql = "DELETE FROM experiments WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':userid', $userid, PDO::PARAM_INT);
        $result[] = $req->execute();

        // get all filenames
        $sql = "SELECT long_name FROM uploads WHERE userid = :userid AND type = :type";
        $req = $this->pdo->prepare($sql);
        $req->execute(array(
            'userid' => $userid,
            'type' => 'experiments'
        ));
        while ($uploads = $req->fetch()) {
            // Delete file
            $filepath = ELAB_ROOT . 'uploads/' . $uploads['long_name'];
            $result[] = unlink($filepath);
        }

        $sql = "DELETE FROM uploads WHERE userid = :userid";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':userid', $userid, PDO::PARAM_INT);
        $result[] = $req->execute();

        return !in_array(0, $result);
    }

    /**
     * Check if a user is in our team
     *
     * @param string $email
     * @param int $team
     * @return int|bool
     */
    private function emailInTeam($email, $team)
    {
        $sql = "SELECT userid FROM users WHERE email LIKE :email AND team = :team";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':email', $email);
        $req->bindParam(':team', $team);
        $req->execute();

        return $req->fetch();
    }

    /**
     * Make a user sysadmin
     *
     * @param string $email Email of user to promote
     * @return bool
     */
    public function promoteSysadmin($email)
    {
        // only sysadmin can do that
        if (!$_SESSION['is_sysadmin']) {
            throw new Exception('This section is out of your reach.');
        }

        // check we have a valid email
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            throw new Exception('Email malformed');
        }

        $sql = "UPDATE users SET usergroup = 1 WHERE email = :email";
        $req = $this->pdo->prepare($sql);
        $req->bindParam(':email', $email);

        return $req->execute();
    }
}

